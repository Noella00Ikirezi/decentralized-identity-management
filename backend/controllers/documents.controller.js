// === documents.controller.js ===

import { contract } from '../utils/ethereum.js';
import { ethers } from 'ethers';

// üìÑ Ajout d‚Äôun document IPFS
export const addDocument = async (req, res) => {
  try {
    const { cid, mimeType, expiresIn = 0 } = req.body;
    const tx = await contract.addDocument(cid, mimeType, expiresIn);
    await tx.wait();
    console.log(`üì§ Document ajout√© : ${cid}`);
    res.json({ success: true, txHash: tx.hash });
  } catch (err) {
    console.error('‚ùå Erreur addDocument:', err);
    res.status(500).json({ error: err.message });
  }
};

// ‚ùå R√©vocation d‚Äôun document IPFS
export const revokeDocument = async (req, res) => {
  try {
    const { docId } = req.body;
    const tx = await contract.revokeDocument(parseInt(docId));
    await tx.wait();
    console.log(`üóëÔ∏è Document r√©voqu√© : ${docId}`);
    res.json({ success: true, txHash: tx.hash });
  } catch (err) {
    console.error('‚ùå Erreur revokeDocument:', err);
    res.status(500).json({ error: err.message });
  }
};

// ü§ù Partage d‚Äôun document IPFS avec expiration
export const shareDocument = async (req, res) => {
  try {
    const { docId, recipient, duration } = req.body;
    const tx = await contract.shareDocument(parseInt(docId), recipient, duration);
    await tx.wait();
    console.log(`üîó Document ${docId} partag√© avec ${recipient}`);
    res.json({ success: true, txHash: tx.hash });
  } catch (err) {
    console.error('‚ùå Erreur shareDocument:', err);
    res.status(500).json({ error: err.message });
  }
};

// üö´ R√©vocation d‚Äôun partage de document
export const revokeSharedAccess = async (req, res) => {
  try {
    const { docId, recipient } = req.body;
    const tx = await contract.revokeSharedAccess(parseInt(docId), recipient);
    await tx.wait();
    console.log(`üîí Partage du document ${docId} r√©voqu√© pour ${recipient}`);
    res.json({ success: true, txHash: tx.hash });
  } catch (err) {
    console.error('‚ùå Erreur revokeSharedAccess:', err);
    res.status(500).json({ error: err.message });
  }
};

// üîç V√©rifier si msg.sender peut acc√©der √† un document
export const canAccess = async (req, res) => {
  try {
    const { owner, docId } = req.params;
    const access = await contract.canAccess(owner, parseInt(docId));
    res.json({ access });
  } catch (err) {
    console.error('‚ùå Erreur canAccess:', err);
    res.status(500).json({ error: err.message });
  }
};

// üì• R√©cup√©rer les documents de l‚Äôutilisateur connect√©
export const getMyDocuments = async (req, res) => {
  try {
    const docs = await contract.getMyDocuments();
    res.json(docs);
  } catch (err) {
    console.error('‚ùå Erreur getMyDocuments:', err);
    res.status(500).json({ error: err.message });
  }
};

// üìú R√©cup√©rer les acc√®s partag√©s d‚Äôun document
export const getSharedAccesses = async (req, res) => {
  try {
    const { docId } = req.params;
    const accesses = await contract.getSharedAccesses(parseInt(docId));
    res.json(accesses);
  } catch (err) {
    console.error('‚ùå Erreur getSharedAccesses:', err);
    res.status(500).json({ error: err.message });
  }
};
